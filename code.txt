pip install tensorflow
pip install cifar10
pip install tensorflow.keras

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Sequential
from keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout
from tensorflow.keras import layers
from tensorflow.keras.utils import to_categorical
import numpy as np
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

from keras.datasets import cifar10
(x_train, y_train), (x_test, y_test) = cifar10.load_data()

#look at data types of the variables
print(type(x_train))
print(type(y_train))
print(type(x_test))
print(type(x_test))

#CODE TO GET SHAPE OF BUILT ARRAYS
print('x_train:',x_train.shape)
print('y_train:',y_train.shape)
print('x_test_shape:',x_test.shape)
print('y_test_shape:',y_test.shape)

#seeing the first image as an array
index=5000
x_train[index]

#showing img as pic
img=plt.imshow(x_train[index])

#get the label
print('the img lable is:',y_train[index])

#img classification
classification = ['airplane','automobile','bird','deer','horse','ship','dog','frog','horse','ship','truck']
print('The class of img is:',classification[y_train[index][0]])

#CONVERT THE LABELS AS A SET OF 10 INTEGERS TO INPUT INTO THE NEURAL NETWORK
y_train_one_hot = to_categorical(y_train)
y_test_one_hot = to_categorical(y_test)

#printing newly generated labels
print(y_train_one_hot)

#print new label of the image given
print('the one hot label is:', y_train_one_hot[index])

#normalizing the pixels to be in 0s and 1s
x_train=x_train / 255
x_test=x_test / 255

x_train[index]



#Create the models architechture
model = Sequential()

#add the first layer
model.add(Conv2D(32, (5,5), activation='relu', input_shape=(32,32,3)))

#add a pooling layer
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Conv2D(32,(5,5),activation='relu'))

#add another pooling layer
model.add(MaxPooling2D(pool_size=(2,2)))

#add a flattening layer
model.add(Flatten())

#add a layer with 1000 neurons
model.add(Dense(1000,activation='relu'))

#add a drop out layer
model.add(Dropout(0.5))

#add a layer with 500 neurons
model.add(Dense(500,activation='relu'))

#add a drop out layer
model.add(Dropout(0.5))

#add a layer with 250 neurons
model.add(Dense(250,activation='relu'))

#add a layer with 10 neurons
model.add(Dense(10,activation='softmax'))


#compile the model
model.compile(loss = 'categorical_crossentropy',
              optimizer = 'adam',
              metrics = ['accuracy'])


#train the model
hist = model. fit (x_train , y_train_one_hot,
                   batch_size = 256,
                   epochs = 10,
                   validation_split = 0.2)